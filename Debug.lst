
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	CtrlA.ASM
	Object File:	Debug\Debug.HEX
	List File:	Debug.lst



 Line  I  Addr  Code            Source

    1:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    2:				; *									*
    3:				; * Copyright (c) GLuisF Automation & TI. Todos direitos reservados.	*
    4:				; * 									*
    5:				; * Nome Modulo: 	CtrlA.ASM					*
    6:				; * Microcontrolador:	AT89S8252-24PC					*
    7:				; * Cristal:		11.0592MHz					*
    8:				; * 									*
    9:				; * Descricao: 	Firmware do controle de acesso e seguranca		*
   10:				; * 									*
   11:				; * Proteus 7.8 SP2 	Tab = 8						*
   12:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   13:
   14:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   15:
   16:				;$NOMOD51
   17:				;$INCLUDE (89S8252.MCU)			;Inclue definicões do uC
   18:
   19:				DEBUG	MACRO				;Macro para debugar sem delays
   20:				;RET
   21:				ENDM
   22:
   23:				;DPL	DATA	DP0L
   24:		N	 96	WMCON	DATA	096H			; watchdog and memory control register
   25:		N      0008	EEMEN	EQU	00001000B		; EEPROM access enable bit
   26:		N      0010	EEMWE	EQU	00010000B		; EEPROM write enable bit
   27:				;WDTRST	EQU 	00000010B 		; EEPROM RDY/BSY bit
   28:		N      0000	ADDRESS	EQU	0B
   29:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   30:
   31:		B      00A1	RS	EQU	P2.1			;pino 4 display
   32:		B      00A2	RW	EQU	P2.2			;pino 5
   33:		B      00A3	EN	EQU	P2.3			;pino 6
   34:		B      00A4	D4	EQU	P2.4			;pino 12
   35:		B      00A5	D5	EQU	P2.5			;pino 13
   36:		B      00A6	D6	EQU	P2.6			;pino 14
   37:		B      00A7	D7	EQU	P2.7			;pino 15
   38:
   39:		B      0080	LINA	EQU	P0.0			;linhas do teclado
   40:		B      0081	LINB	EQU	P0.1
   41:		B      0082	LINC	EQU	P0.2
   42:		B      0083	LIND	EQU	P0.3
   43:		B      0084	COL1	EQU	P0.4			;colunas do teclado

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:		B      0085	COL2	EQU	P0.5
   45:		B      0086	COL3	EQU	P0.6
   46:		B      0087	COL4	EQU	P0.7
   47:
   48:		B      00B4	SOLEN	EQU	P3.4			;solenoide da porta
   49:		B      00B5	SENSOR	EQU	P3.5			;sensor fim-de-curso
   50:		B      00B6	BUZZER	EQU	P3.6
   51:		B      00B0	RX	EQU	P3.0
   52:		B      00B1	TX	EQU	P3.1
   53:
   54:		N      0080	LIN1	EQU	080H			;seleciona linha 1 do display
   55:		N      00C0	LIN2	EQU	0C0H			;seleciona linha 2 do display
   56:
   57:		N	 20	N1	DATA	20H			;byte 1 da senha digitada
   58:		N	 21	N2	DATA	21H			;byte 2 da senha digitada
   59:		N	 22	N3	DATA	22H			;byte 3 da senha digitada
   60:		N	 23	N4	DATA	23H			;byte 4 da senha digitada
   61:		N	 24	N5	DATA	24H			;byte 5 da senha digitada
   62:		N	 25	N6	DATA	25H			;byte 6 da senha digitada
   63:
   64:		N	 26	NUMERO	DATA	26H			;local onde o numero digitado é salvo
   65:		N	 27	POSICAO	DATA	27H			;local onde a posicao do cursor no display é salvo
   66:		N	 28	TRY	DATA	28H			;local onde o numero de tentativas é salvo
   67:
   68:		C      0000		ORG	RESET			;endereco apos o reset
   69:	  0000	02 00 65		JMP	MAIN			;pula para MAIN
   70:
   71:					;ORG	SINT
   72:					;RETI
   73:
   74:				;mensagens gravadas na memoria de codigo do microcontrolador
   75:	  0003	41 43 45 53	MSGB:	DB	'ACESSO BLOQUEADO'
	  0007	53 4F 20 42
	  000B	4C 4F 51 55
	  000F	45 41 44 4F
   76:	  0013	20 20 20 20	MSG0:	DB	'    PASSE O', 0
	  0017	50 41 53 53
	  001B	45 20 4F 00
   77:	  001F	43 41 52 54	MSG1:	DB	'CARTAO', 0
	  0023	41 4F 00
   78:	  0026	20 44 49 47	MSG2:	DB	' DIGITE A SENHA', 0
	  002A	49 54 45 20
	  002E	41 20 53 45
	  0032	4E 48 41 00
   79:	  0036	20 41 43 45	MSG3:	DB	' ACESSO NEGADO', 0
	  003A	53 53 4F 20
	  003E	4E 45 47 41
	  0042	44 4F 00
   80:	  0045	41 43 45 53	MSG4:	DB	'ACESSO LIBERADO', 0
	  0049	53 4F 20 4C
	  004D	49 42 45 52
	  0051	41 44 4F 00
   81:	  0055	30 31 32 33	NS:	DB	'0123456789'		;caracteres numéricos
	  0059	34 35 36 37
	  005D	38 39
   82:	  005F	00 01 07 07	SENHA:	DB	0, 1, 7, 7, 5, 8	;senha salva na EEPROM

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

	  0063	05 08
   83:
   84:	  0065	C2 A2		MAIN:	CLR	RW			;Display no modo de escrita
   85:	  0067	C2 B4			CLR	SOLEN			;desliga solenoide
   86:	  0069	C2 B6			CLR	BUZZER			;desliga buzzer
   87:	  006B	12 02 2C		CALL	LCD_INIT		;Inicializa display
   88:	  006E	12 02 F1		CALL	SOM
   89:	  0071	75 28 03		MOV	TRY, #3			;Adiciona 3 tentativas de erro
   90:	  0074	AF 28		START:	MOV	R7, TRY
   91:	  0076	BF 00 0D		CJNE	R7, #0, OKS		;Compara tentativa com 0 se for maior continua
   92:	  0079	74 01			MOV	A, #01H			;Limpa display e move cursor para linha 1
   93:	  007B	12 02 73		CALL	COMAND
   94:	  007E	90 00 03		MOV	DPTR, #MSGB		;Escreve 'ACESSO BLOQUEADO'
   95:	  0081	12 02 E1		CALL	MSG
   96:	  0084	80 FE			JMP	$			;Bloqueia acesso para sempre
   97:	  0086	74 01		OKS:	MOV	A, #01H			;Limpa display e move cursor para linha 1
   98:	  0088	12 02 73		CALL	COMAND
   99:	  008B	90 00 13		MOV	DPTR, #MSG0		;Escreve '    PASSE O'
  100:	  008E	12 02 E1		CALL	MSG
  101:	  0091	74 C5			MOV	A, #LIN2+5		;Seleciona a linha 2 posicao 5
  102:	  0093	12 02 73		CALL	COMAND
  103:	  0096	90 00 1F		MOV	DPTR, #MSG1		;Escreve 'CARTAO'
  104:	  0099	12 02 E1		CALL	MSG
  105:	  009C	74 64			MOV	A, #100			;Espera 100ms
  106:	  009E	12 03 02		CALL	WAITMS
  107:	  00A1	30 B0 FD		JNB	RX, $			;espera leitor ler
  108:	  00A4	12 02 F1		CALL	SOM
  109:	  00A7	74 64			MOV	A, #100			;Espera 100ms
  110:	  00A9	12 03 02		CALL	WAITMS
  111:	  00AC	12 03 02		CALL	WAITMS
  112:
  113:	  00AF	74 01		PROCES:	MOV	A, #01H			;Limpa display e move cursor para linha 1
  114:	  00B1	12 02 73		CALL	COMAND
  115:
  116:	  00B4	90 00 26		MOV	DPTR, #MSG2		;Escreve 'DIGITE A SENHA'
  117:	  00B7	12 02 E1		CALL	MSG
  118:
  119:	  00BA	74 C5			MOV	A, #LIN2+5		;Seleciona a linha 2 posicao 5
  120:	  00BC	12 02 73		CALL	COMAND
  121:
  122:	  00BF	75 80 FF		MOV	P0, #0FFH		;Reseta P0
  123:	  00C2	75 27 00		MOV	POSICAO, #0		;Limpa posicao do Numero no display
  124:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  125:				;Controle matriz de teclado
  126:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  127:	  00C5	C2 80		INICIO:	CLR	LINA			;seleciona a linha A
  128:	  00C7	20 84 05		JB	COL1, NEXT0
  129:	  00CA	74 07			MOV	A, #7
  130:	  00CC	12 01 47		CALL	TECLA
  131:	  00CF	20 85 05	NEXT0:	JB	COL2, NEXT1
  132:	  00D2	74 08			MOV	A, #8
  133:	  00D4	12 01 47		CALL	TECLA
  134:	  00D7	20 86 05	NEXT1:	JB	COL3, NEXT2
  135:	  00DA	74 09			MOV	A, #9
  136:	  00DC	12 01 47		CALL	TECLA
  137:	  00DF	20 87 00	NEXT2:	JB	COL4, NEXT3

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  138:					;CALL	TECLAF3
  139:	  00E2	D2 80		NEXT3:	SETB	LINA
  140:	  00E4	C2 81			CLR	LINB			;seleciona a linha B
  141:	  00E6	20 84 05		JB	COL1, NEXT4
  142:	  00E9	74 04			MOV	A, #4
  143:	  00EB	12 01 47		CALL	TECLA
  144:	  00EE	20 85 05	NEXT4:	JB	COL2, NEXT5
  145:	  00F1	74 05			MOV	A, #5
  146:	  00F3	12 01 47		CALL	TECLA
  147:	  00F6	20 86 05	NEXT5:	JB	COL3, NEXT6
  148:	  00F9	74 06			MOV	A, #6
  149:	  00FB	12 01 47		CALL	TECLA
  150:	  00FE	20 87 03	NEXT6:	JB	COL4, NEXT7
  151:	  0101	12 01 6D		CALL	TECLAF2
  152:	  0104	D2 81		NEXT7:	SETB	LINB
  153:	  0106	C2 82			CLR	LINC			;seleciona a linha C
  154:	  0108	20 84 05		JB	COL1, NEXT8
  155:	  010B	74 01			MOV	A, #1
  156:	  010D	12 01 47		CALL	TECLA
  157:	  0110	20 85 05	NEXT8:	JB	COL2, NEXT9
  158:	  0113	74 02			MOV	A, #2
  159:	  0115	12 01 47		CALL	TECLA
  160:	  0118	20 86 05	NEXT9:	JB	COL3, NEXT10
  161:	  011B	74 03			MOV	A, #3
  162:	  011D	12 01 47		CALL	TECLA
  163:	  0120	20 87 03	NEXT10:	JB	COL4, NEXT11
  164:	  0123	12 01 76		CALL	TECLAF1
  165:	  0126	D2 82		NEXT11:	SETB	LINC
  166:	  0128	C2 83			CLR	LIND			;seleciona a linha D
  167:	  012A	20 84 05		JB	COL1, NEXT12
  168:	  012D	74 00			MOV	A, #0
  169:	  012F	12 01 47		CALL	TECLA
  170:	  0132	20 85 00	NEXT12:	JB	COL2, NEXT13
  171:					;CALL	TECLAP
  172:	  0135	20 86 05	NEXT13:	JB	COL3, NEXT14
  173:	  0138	74 FF			MOV	A, #0FFH
  174:	  013A	12 01 86		CALL	TECLAC
  175:	  013D	20 87 03	NEXT14:	JB	COL4, NEXT15
  176:	  0140	12 01 A8		CALL	TECLAE
  177:	  0143	D2 83		NEXT15:	SETB	LIND
  178:
  179:				;	INC	R7
  180:				;	CJNE	R7,#250,PINICIO
  181:				;	INC	R6
  182:				;	CJNE	R6,#250,PINICIO
  183:				;		CALL	SOM
  184:				;	MOV	A,#200
  185:				;	CALL	WAITMS
  186:				;		CALL	SOM
  187:				;	JMP	START
  188:
  189:	  0145	01 C5		PINICIO:	JMP	INICIO
  190:
  191:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  192:				;Fim controle teclado
  193:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  194:
  195:	  0147	A9 27		TECLA:	MOV	R1,POSICAO
  196:	  0149	B9 06 01		CJNE	R1, #6, $+4		;Compara a POSICAO com 6. Se igual, nao escreve nada
  197:	  014C	22			RET
  198:	  014D	F5 26			MOV	NUMERO, A		;Salva numero digitado
  199:	  014F	12 03 1B		CALL	DEBOUN			;debouncing de 10ms para evitar rebatimento
  200:
  201:	  0152	E5 26			MOV	A, NUMERO		;Move p/ACC o numero digitado anteriormente
  202:	  0154	90 00 55		MOV	DPTR, #NS		;Move para o DataPointer o endereco do caracter ASCII em NS
  203:	  0157	93			MOVC	A, @A+DPTR		;Move p/ACC o caracter ASCII relativo ao numero digitado
  204:	  0158	12 02 AE		CALL	WRITE			;Escreve caracter numérico no display
  205:
  206:	  015B	E5 27			MOV	A, POSICAO		;Move p/ACC a posicao do numero no display
  207:	  015D	24 20			ADD	A, #N1			;Soma com 20 para enderecar a posicao das senhas
  208:	  015F	F8			MOV	R0, A			;Move p/R0 o valor de ACC para endereco indireto @
  209:	  0160	A6 26			MOV	@R0, NUMERO		;Salva numero digitado nas posicões N
  210:
  211:	  0162	05 27			INC	POSICAO			;incrementa numero da posicao do cursor no display
  212:
  213:	  0164	E5 80		VOLTA:	MOV	A, P0			;Espera liberar qualquer tecla
  214:	  0166	54 F0			ANL	A, #11110000B		;Faz uma mascara entre A e 11110000B
  215:	  0168	B4 F0 F9		CJNE	A, #0F0H, VOLTA
  216:	  016B	22		FIM:	RET
  217:
  218:	  016C			TECLAF3:				;TECLA F3
  219:	  016C	22			RET
  220:
  221:	  016D			TECLAF2:				;TECLA F2
  222:	  016D	90 00 00		MOV	DPTR, #ADDRESS		; address to write
  223:	  0170	74 4A			MOV	A, #'J'			; data to write
  224:	  0172	12 03 4D		CALL	WRITEX			;Escreve na EEPROM
  225:	  0175	22			RET
  226:
  227:	  0176			TECLAF1:				;TECLA F1
  228:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  229:	  0176	74 C5			MOV	A, #LIN2+5		;Seleciona a linha 2 posicao 5
  230:	  0178	12 02 73		CALL	COMAND
  231:	  017B	90 00 00		MOV	DPTR, #ADDRESS		;Move para DPTR o valor do endereco da memoria eeprom
  232:	  017E	12 03 5F		CALL	MSGEXT			; escreve no display o valor lido na memoria eeprom
  233:	  0181	12 02 F1		CALL	SOM
  234:	  0184	22			RET
  235:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  236:	  0185			TECLAP:					;TECLA PONTO
  237:	  0185	22			RET
  238:
  239:				;Sub-rotina da tecla C para apagar um caracter do display
  240:	  0186	A9 27		TECLAC:	MOV	R1,POSICAO
  241:	  0188	B9 00 01		CJNE	R1, #0, CONT		;se a posicao do numero ja for zero nao apaga nada
  242:	  018B	22			RET
  243:	  018C	15 27		CONT:	DEC	POSICAO			;decrementa posicao
  244:
  245:	  018E	E5 27			MOV	A, POSICAO		;Move p/ACC a posicao do numero no display
  246:	  0190	24 20			ADD	A, #N1			;Soma com 20 para enderecar a posicao das senhas
  247:	  0192	F8			MOV	R0, A			;Move p/R0 o valor de ACC para endereco indireto @
  248:	  0193	76 00			MOV	@R0, #0			;Apaga numero digitado nas posicões N
  249:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  250:	  0195	74 10			MOV	A, #10H			;comando p/mover o cursor para esquerda
  251:	  0197	12 02 73		CALL	COMAND
  252:	  019A	74 20			MOV	A, #' '			;escreve ' ' para apagar numero digitado
  253:	  019C	12 02 AE		CALL	WRITE
  254:	  019F	74 10			MOV	A, #10H			;comando p/mover o cursor para esquerda
  255:	  01A1	12 02 73		CALL	COMAND
  256:	  01A4	30 86 FD		JNB	COL3, $			;espera tecla C ser liberada
  257:	  01A7	22			RET
  258:
  259:	  01A8	A9 27		TECLAE:	MOV	R1,POSICAO
  260:	  01AA	B9 06 7E		CJNE	R1, #6, RETOR		;se a posicao do numero ja for 6 retorna
  261:	  01AD	7B 00			MOV	R3, #0			;move para R3 o valor 0
  262:	  01AF	90 00 5F		MOV	DPTR, #SENHA		;move para o DataPointer o endereco da senha gravada na memo
				ria de codigo
  263:	  01B2	EB		NEXTN:	MOV	A, R3			;move p/ACC o valor de R3
  264:	  01B3	93			MOVC	A, @A+DPTR		;Move p/ACC o dado enderecado indiretamente por A + DPTR
  265:	  01B4	FC			MOV	R4, A			;salva em R4 o valor do digito salvo encontrado
  266:
  267:	  01B5	EB			MOV	A, R3			;Move p/A a posicao do Numero em N
  268:	  01B6	24 20			ADD	A, #N1			;Soma com 20 para enderecar a posicao das senhas
  269:	  01B8	F8			MOV	R0, A			;Move para R0 a posicâo da senha
  270:	  01B9	86 26			MOV	NUMERO, @R0		;Pega numero digitado nas posicões N
  271:	  01BB	EC			MOV	A, R4			;move p/ACC o valor do digito
  272:	  01BC	B5 26 40		CJNE	A, NUMERO, ERRADA	;compara o numero da senha digitada com a gravada
  273:	  01BF	BB 05 3A		CJNE	R3, #5, INCREM		;proximo numero
  274:
  275:	  01C2	74 01			MOV	A, #01H			;senha correta
  276:	  01C4	12 02 73		CALL	COMAND			;comando para apagar display
  277:	  01C7	90 00 45		MOV	DPTR, #MSG4		;escreve 'ACESSO	LIBERADO'
  278:	  01CA	12 02 E1		CALL	MSG
  279:	  01CD	12 02 F1		CALL	SOM
  280:	  01D0	75 28 03		MOV	TRY, #3			;Adiciona 3 tentativas de erro
  281:
  282:	  01D3	71 2D			ACALL	ENVIA
  283:
  284:	  01D5	D2 B4			SETB	SOLEN			;liga solenoide
  285:	  01D7	30 B5 FD		JNB	SENSOR, $		;espera porta abrir
  286:	  01DA	74 01			MOV	A, #1
  287:	  01DC	71 0B			ACALL	WAIT_S
  288:	  01DE	C2 B4			CLR	SOLEN			;desliga solenoide
  289:
  290:	  01E0	74 7D			MOV	A, #125
  291:	  01E2	12 03 02		CALL	WAITMS
  292:	  01E5	12 03 02		CALL	WAITMS			;espera 250ms
  293:
  294:	  01E8	20 B5 FD		JB	SENSOR, $		;espera porta fechar
  295:	  01EB	74 7D			MOV	A, #125			;espera 125ms
  296:	  01ED	12 03 02		CALL	WAITMS
  297:	  01F0	20 B5 F8		JB	SENSOR, $-5		;se porta estiver aberta ainda verifica novamente
  298:
  299:	  01F3	12 02 F1		CALL	SOM
  300:
  301:					;CLR	SOLEN			;desliga solenoide
  302:	  01F6	15 81			DEC	SP			;decrementa 2X o StackPointer pois nao sera utilizada a inst
				rucao RET
  303:	  01F8	15 81			DEC	SP

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  304:	  01FA	01 74			JMP	START			;retorna ao inicio do processo
  305:
  306:	  01FC	0B		INCREM:	INC	R3			;Incrementa a posicao do numero em N
  307:	  01FD	80 B3			JMP	NEXTN			;verifica proximo numero
  308:
  309:	  01FF	74 01		ERRADA:	MOV	A, #01H			;senha errada
  310:	  0201	12 02 73		CALL	COMAND			;comando para apagar display
  311:	  0204	90 00 36		MOV	DPTR, #MSG3		;escreve 'ACESSO NEGADO'
  312:	  0207	12 02 E1		CALL	MSG
  313:	  020A	12 02 F1		CALL	SOM
  314:	  020D	74 7D			MOV	A, #125
  315:	  020F	12 03 02		CALL	WAITMS			;espera 125ms
  316:	  0212	12 02 F1		CALL	SOM
  317:	  0215	74 7D			MOV	A, #125			;127ms é o maximo possível
  318:	  0217	12 03 02		CALL	WAITMS
  319:	  021A	12 03 02		CALL	WAITMS
  320:	  021D	12 03 02		CALL	WAITMS
  321:	  0220	12 03 02		CALL	WAITMS			;espera 500ms
  322:	  0223	15 28			DEC	TRY			;decrementa tentativa
  323:	  0225	15 81			DEC	SP			;decrementa 2X o StackPointer pois nao sera utilizada a inst
				rucao RET
  324:	  0227	15 81			DEC	SP
  325:	  0229	01 74			JMP	START			;volta ao processo para redigitar a senha
  326:
  327:	  022B	22		RETOR:	RET
  328:
  329:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  330:				;Sub-rotina de Inicializacao do display LCD
  331:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  332:
  333:	  022C			LCD_INIT:
  334:					;DEBUG
  335:	  022C	74 14			MOV	A, #20
  336:	  022E	12 03 02		CALL	WAITMS			;Wait 20ms for LCD to power up
  337:	  0231	C2 A1			CLR	RS			;with RS = 0
  338:	  0233	75 A0 30		MOV	P2, #30H		;Write D7-4 = 3 hex
  339:	  0236	D2 A3			SETB	EN			;
  340:	  0238	C2 A3			CLR	EN			;Send enable
  341:	  023A	74 05			MOV	A, #5
  342:	  023C	12 03 02		CALL	WAITMS			;Wait 5ms
  343:	  023F	D2 A3			SETB	EN			;
  344:	  0241	C2 A3			CLR	EN			;Send enable
  345:	  0243	12 02 FD		CALL	WAIT200			;Wait 200us
  346:	  0246	D2 A3			SETB	EN			;
  347:	  0248	C2 A3			CLR	EN			;Send enable
  348:	  024A	12 02 FD		CALL	WAIT200			;Wait 200us
  349:	  024D	75 A0 20		MOV	P2, #20H		;Write D7-4 = 3 hex
  350:	  0250	D2 A3			SETB	EN			;enable four-bit mode
  351:	  0252	C2 A3			CLR	EN			;Send enable
  352:	  0254	74 05			MOV	A, #5
  353:	  0256	12 03 02		CALL	WAITMS			;Wait 5ms
  354:
  355:	  0259	74 28			MOV	A, #28H			;comand 28 hex (4-Bits, 2-lines)
  356:	  025B	12 02 73		CALL	COMAND
  357:	  025E	74 08			MOV	A, #08H			;comand 08 hex (dont shift display, hide cursor)
  358:	  0260	12 02 73		CALL	COMAND

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  359:	  0263	74 01			MOV	A, #01H			;comand 01 hex (clear and home display)
  360:	  0265	12 02 73		CALL	COMAND
  361:	  0268	74 06			MOV	A, #06H			;comand 06 hex (move cursor right)
  362:	  026A	12 02 73		CALL	COMAND
  363:	  026D	74 0C			MOV	A, #0CH			;comand 0C hex (turn on display)
  364:	  026F	12 02 73		CALL	COMAND
  365:	  0272	22			RET				;Display is ready to accept data.
  366:
  367:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  368:				;Fim inicializacao display LCD
  369:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  370:
  371:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  372:				;Sub-rotina de escrita de comando no display
  373:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  374:	  0273			COMAND:	;DEBUG
  375:	  0273	C2 A3			CLR	EN
  376:	  0275	C2 A1			CLR	RS
  377:	  0277	A2 E7			MOV	C, 0E7H
  378:	  0279	92 A7			MOV	D7, C
  379:	  027B	A2 E6			MOV	C, 0E6H
  380:	  027D	92 A6			MOV	D6, C
  381:	  027F	A2 E5			MOV	C, 0E5H
  382:	  0281	92 A5			MOV	D5, C
  383:	  0283	A2 E4			MOV	C, 0E4H
  384:	  0285	92 A4			MOV	D4, C
  385:	  0287	D2 A3			SETB	EN
  386:	  0289	C2 A3			CLR	EN
  387:	  028B	C0 E0			PUSH	ACC			;Salva ACC
  388:	  028D	74 05			MOV	A, #5
  389:	  028F	12 03 02		CALL	WAITMS			;Espera 5ms
  390:	  0292	D0 E0			POP	ACC			;Recupera ACC
  391:	  0294	A2 E3			MOV	C, 0E3H
  392:	  0296	92 A7			MOV	D7, C
  393:	  0298	A2 E2			MOV	C, 0E2H
  394:	  029A	92 A6			MOV	D6, C
  395:	  029C	A2 E1			MOV	C, 0E1H
  396:	  029E	92 A5			MOV	D5, C
  397:	  02A0	A2 E0			MOV	C, 0E0H
  398:	  02A2	92 A4			MOV	D4, C
  399:	  02A4	D2 A3			SETB	EN
  400:	  02A6	C2 A3			CLR	EN
  401:	  02A8	74 05			MOV	A, #5
  402:	  02AA	12 03 02		CALL	WAITMS
  403:	  02AD	22			RET				;Fim da sub-rotina
  404:
  405:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  406:				;Sub-rotina de escrita de caracter no display
  407:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  408:	  02AE			WRITE:	;DEBUG
  409:	  02AE	C2 A3			CLR	EN
  410:	  02B0	D2 A1			SETB	RS
  411:	  02B2	A2 E7			MOV	C, 0E7H
  412:	  02B4	92 A7			MOV	D7, C
  413:	  02B6	A2 E6			MOV	C, 0E6H
  414:	  02B8	92 A6			MOV	D6, C

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  415:	  02BA	A2 E5			MOV	C, 0E5H
  416:	  02BC	92 A5			MOV	D5, C
  417:	  02BE	A2 E4			MOV	C, 0E4H
  418:	  02C0	92 A4			MOV	D4, C
  419:	  02C2	D2 A3			SETB	EN
  420:	  02C4	C2 A3			CLR	EN
  421:	  02C6	12 02 FD		CALL	WAIT200			;Wait 200us
  422:	  02C9	A2 E3			MOV	C, 0E3H
  423:	  02CB	92 A7			MOV	D7, C
  424:	  02CD	A2 E2			MOV	C, 0E2H
  425:	  02CF	92 A6			MOV	D6, C
  426:	  02D1	A2 E1			MOV	C, 0E1H
  427:	  02D3	92 A5			MOV	D5, C
  428:	  02D5	A2 E0			MOV	C, 0E0H
  429:	  02D7	92 A4			MOV	D4, C
  430:	  02D9	D2 A3			SETB	EN
  431:	  02DB	C2 A3			CLR	EN
  432:	  02DD	12 02 FD		CALL	WAIT200			;Wait 200us
  433:	  02E0	22			RET				;Fim da sub-rotina
  434:
  435:	  02E1			MSG:	;DEBUG
  436:	  02E1	7D 00			MOV	R5, #0			;Sub-rotina p/escrever a mensagem selecionada
  437:	  02E3	ED		LOOP:	MOV	A, R5
  438:	  02E4	93			MOVC	A, @A+DPTR
  439:	  02E5	B4 00 03		CJNE	A, #0, NEXT
  440:	  02E8	02 02 F0		JMP	EXIT
  441:	  02EB	51 AE		NEXT:	CALL	WRITE
  442:	  02ED	0D			INC	R5
  443:	  02EE	80 F3			JMP	LOOP
  444:	  02F0	22		EXIT:	RET
  445:
  446:	  02F1			SOM:	;DEBUG				;sub-rotina de espera de 200us
  447:	  02F1	7D C8			MOV	R5, #200
  448:	  02F3	B2 B6		SOM2:	CPL	BUZZER
  449:	  02F5	74 01			MOV	A, #1
  450:	  02F7	12 03 02		CALL	WAITMS
  451:	  02FA	DD F7			DJNZ	R5, SOM2
  452:	  02FC	22			RET
  453:
  454:	  02FD			WAIT200:				;sub-rotina de espera de 200us
  455:					;DEBUG
  456:	  02FD	7F 64			MOV	R7, #100		;move o valor 100 para R7
  457:	  02FF	DF FE			DJNZ	R7, $			;decrementa até R7 = 0, obs.: DJNZ demora 2 ciclos, por o v
				alor 100 e nao 200
  458:	  0301	22			RET
  459:
  460:				;Sub-rotina de espera na unidade de milisegundo de 0 a 127ms
  461:	  0302			WAITMS:	;DEBUG
  462:					;PUSH	ACC			;Salva ACC
  463:	  0302	23			RL	A			;Multiplica por 2
  464:	  0303	FF			MOV	R7, A			;Move o valor de A para R7
  465:	  0304	7E FA			MOV	R6, #250		;Move 250 para R6
  466:	  0306	DE FE			DJNZ	R6, $			;Decrementa até R6 = 0
  467:	  0308	DF FA			DJNZ	R7, $-4			;Decrementa R7 e recarrega R6 se diferente de zero
  468:					;POP	ACC			;Recupera ACC
  469:	  030A	22			RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  470:
  471:				;Sub-rotina de espera na unidade de segundo
  472:	  030B			WAIT_S:	;DEBUG
  473:	  030B	FF			MOV	R7, A			;move p/R7 o valor de A
  474:	  030C	7E 08			MOV	R6, #8			;move p/R6 o valor 8
  475:	  030E	7D FA			MOV	R5, #250		;move p/R5 o valor 250
  476:	  0310	7C FA			MOV	R4, #250		;move p/R4 o valor 250
  477:	  0312	DC FE			DJNZ	R4, $			;Decrementa até R6 = 0
  478:	  0314	DD FA			DJNZ	R5, $-4			;Decrementa R5 e recarrega R4 se diferente de zero
  479:	  0316	DE F6			DJNZ	R6, $-8			;Decrementa R6 e recarrega R5 se diferente de zero
  480:	  0318	DF F2			DJNZ	R7, $-12		;Decrementa R7 e recarrega R6 se diferente de zero
  481:	  031A	22			RET
  482:
  483:	  031B			DEBOUN: ;DEBUG
  484:	  031B	7F FA			MOV	R7, #250		;debouncing de 10ms para evitar rebatimento
  485:	  031D	7E 14		VERIF2:	MOV	R6, #20			;
  486:	  031F	E5 80		VERIF:	MOV	A, P0			;
  487:	  0321	54 F0			ANL	A, #11110000B		;
  488:	  0323	B4 F0 02		CJNE	A, #0F0H, VAI2		;
  489:	  0326	21 6B			JMP	FIM			;
  490:	  0328	DE F5		VAI2:	DJNZ	R6, VERIF		;
  491:	  032A	DF F1			DJNZ	R7, VERIF2		;
  492:	  032C	22			RET
  493:
  494:	  032D	75 89 20	ENVIA:	MOV	TMOD, #00100000B	;Timer 1 no modo 2 (8 bits com recarga automatica)
  495:	  0330	75 87 00		MOV	PCON, #00000000B	;Sem dobrar a frequencia
  496:	  0333	75 8D FD		MOV	TH1, #0FDH	;	Recarga do TIMER 1 para 9600 bauds
  497:	  0336	D2 8E			SETB	TR1			;Liga TIMER 1
  498:	  0338	75 98 40		MOV	SCON, #01000000B	;Serial no modo 1 (Assincrona, 8 bits, Timer1
  499:	  033B	74 7F			MOV	A, #127
  500:	  033D	71 02			ACALL	WAITMS
  501:	  033F	74 41			MOV	A, #'A'
  502:	  0341	F5 99			MOV	SBUF, A			;Envia para serial o valor de A
  503:	  0343	30 99 FD		JNB	TI, $			;espera transmissao completar
  504:	  0346	C2 99			CLR	TI
  505:	  0348	C2 8E			CLR	TR1
  506:	  034A	C2 8E			CLR	TR1
  507:	  034C	22			RET
  508:
  509:	  034D	43 96 08	WRITEX:	ORL	WMCON, #EEMEN		;enable EEPROM accesses
  510:	  0350	43 96 10		ORL	WMCON, #EEMWE		;enable EEPROM writes
  511:	  0353	F0			MOVX	@DPTR, A		;write EEPROM
  512:	  0354	74 0A			MOV	A, #10
  513:	  0356	71 02			CALL	WAITMS			; espera 10ms
  514:					;movx 	a, @DPTR 		;read EEPROM
  515:					;cjne 	a, #DATA, ERROR		;jump if data compare fails
  516:	  0358	63 96 10		XRL	WMCON, #EEMWE		;disable EEPROM writes
  517:	  035B	63 96 08		XRL	WMCON, #EEMEN		;disable EEPROM accesses
  518:	  035E	22			RET
  519:
  520:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  521:	  035F			MSGEXT:					;Sub-rotina p/escrever a mensagem selecionada localizada na
				memoria eeprom
  522:	  035F	43 96 08		ORL	WMCON, #EEMEN		;enable EEPROM accesses
  523:	  0362	E0		LOOPX:	MOVX	A, @DPTR		;Move para A o valor que o DPTR aponta na memoria eeprom
  524:	  0363	B4 00 03		CJNE	A, #0, NEXTX		;Compara A com 0 e pula para NEXTX se nao for igual

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  525:	  0366	02 03 71		JMP	EXITX			;Pula para EXITX
  526:	  0369	51 AE		NEXTX:	CALL	WRITE			;Escreve no display o caracter em ACC
  527:	  036B	75 27 00		MOV	POSICAO, #0		;Limpa posicao do Numero no display
  528:	  036E	A3			INC	DPTR			;Incrementa a parte baixa do DPTR (=INC DPL)
  529:	  036F	80 F1			JMP	LOOPX			;Pula para LOOPX
  530:	  0371	63 96 08	EXITX:	XRL	WMCON, #EEMEN		;disable EEPROM accesses
  531:	  0374	22			RET
  532:
  533:				; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  534:					END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
ADDRESS				  NUMBER    0000	  28
B				  DATA	      F0
BUZZER				  NUMBER    00B6	  50
COL1				  NUMBER    0084	  43
COL2				  NUMBER    0085	  44
COL3				  NUMBER    0086	  45
COL4				  NUMBER    0087	  46
COMAND				  CODE	    0273	 374
CONT				  CODE	    018C	 243
CY				  BIT	      D7
D4				  NUMBER    00A4	  34
D5				  NUMBER    00A5	  35
D6				  NUMBER    00A6	  36
D7				  NUMBER    00A7	  37
DEBOUN				  CODE	    031B	 483
DEBUG				  MACRO	        	  19
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
EEMEN				  NUMBER    0008	  25
EEMWE				  NUMBER    0010	  26
EN				  NUMBER    00A3	  33
ENVIA				  CODE	    032D	 494
ERRADA				  CODE	    01FF	 309
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXIT				  CODE	    02F0	 444
EXITX				  CODE	    0371	 530
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
FIM				  CODE	    016B	 216
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INCREM				  CODE	    01FC	 306
INICIO				  CODE	    00C5	 127
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCD_INIT			  CODE	    022C	 333

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LIN1				  NUMBER    0080	  54
LIN2				  NUMBER    00C0	  55
LINA				  NUMBER    0080	  39
LINB				  NUMBER    0081	  40
LINC				  NUMBER    0082	  41
LIND				  NUMBER    0083	  42
LOOP				  CODE	    02E3	 437
LOOPX				  CODE	    0362	 523
MAIN				  CODE	    0065	  84
MSG				  CODE	    02E1	 435
MSG0				  CODE	    0013	  76
MSG1				  CODE	    001F	  77
MSG2				  CODE	    0026	  78
MSG3				  CODE	    0036	  79
MSG4				  CODE	    0045	  80
MSGB				  CODE	    0003	  75
MSGEXT				  CODE	    035F	 521
N1				  DATA	      20	  57
N2				  DATA	      21	  58
N3				  DATA	      22	  59
N4				  DATA	      23	  60
N5				  DATA	      24	  61
N6				  DATA	      25	  62
NEXT				  CODE	    02EB	 441
NEXT0				  CODE	    00CF	 131
NEXT1				  CODE	    00D7	 134
NEXT10				  CODE	    0120	 163
NEXT11				  CODE	    0126	 165
NEXT12				  CODE	    0132	 170
NEXT13				  CODE	    0135	 172
NEXT14				  CODE	    013D	 175
NEXT15				  CODE	    0143	 177
NEXT2				  CODE	    00DF	 137
NEXT3				  CODE	    00E2	 139
NEXT4				  CODE	    00EE	 144
NEXT5				  CODE	    00F6	 147
NEXT6				  CODE	    00FE	 150
NEXT7				  CODE	    0104	 152
NEXT8				  CODE	    0110	 157
NEXT9				  CODE	    0118	 160
NEXTN				  CODE	    01B2	 263
NEXTX				  CODE	    0369	 526
NS				  CODE	    0055	  81
NUMERO				  DATA	      26	  64
OKS				  CODE	    0086	  97
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PINICIO				  CODE	    0145	 189
POSICAO				  DATA	      27	  65
PROCES				  CODE	    00AF	 113
PS				  BIT	      BC

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RETOR				  CODE	    022B	 327
RI				  BIT	      98
RS				  NUMBER    00A1	  31
RS0				  BIT	      D3
RS1				  BIT	      D4
RW				  NUMBER    00A2	  32
RX				  NUMBER    00B0	  51
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SENHA				  CODE	    005F	  82
SENSOR				  NUMBER    00B5	  49
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SOLEN				  NUMBER    00B4	  48
SOM				  CODE	    02F1	 446
SOM2				  CODE	    02F3	 448
SP				  DATA	      81
START				  CODE	    0074	  90
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TECLA				  CODE	    0147	 195
TECLAC				  CODE	    0186	 240
TECLAE				  CODE	    01A8	 259
TECLAF1				  CODE	    0176	 227
TECLAF2				  CODE	    016D	 221
TECLAF3				  CODE	    016C	 218
TECLAP				  CODE	    0185	 236
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TRY				  DATA	      28	  66
TX				  NUMBER    00B1	  52
TXD				  BIT	      B1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
VAI2				  CODE	    0328	 490
VERIF				  CODE	    031F	 486
VERIF2				  CODE	    031D	 485
VOLTA				  CODE	    0164	 213
WAIT200				  CODE	    02FD	 454
WAITMS				  CODE	    0302	 461
WAIT_S				  CODE	    030B	 472
WMCON				  DATA	      96	  24
WR				  BIT	      B6
WRITE				  CODE	    02AE	 408
WRITEX				  CODE	    034D	 509
